version: '3.8'
services:
  # This runs a local hardhat node for Badger to be deployed on
  # and users of the front-end to connect and interact with.
  # 
  # This enables the ability to develop on a local version of Badger
  # without having to deploy to a testnet or mainnet.
  badger_node:
    build:
      dockerfile: Dockerfile.dev.node
      context: ./contracts
    volumes:
      - .:/contracts/code
    env_file:
      - ./.env
    ports:
      - "8545:8545"
    restart: unless-stopped
    command: npx hardhat run scripts/deploy/deploy.js
  # This runs a local instance of the Badger API and database
  # by creating a local Postgres database in the api/ directory.
  # 
  # The initialization process of this will cause the API
  # to error out until it is ready to accept connections even
  # though the worker is technically running. This is expected
  # behavior and will resolve itself once the database is ready.
  badger_db:
    image: postgres:13.2
    container_name: badger_db
    hostname: badger_db
    volumes:
      - ./api/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: badger
      POSTGRES_USER: badger
      POSTGRES_DB: badger
    ports:
      - '5432:5432'
    restart: unless-stopped
  # Start a local instance of Redis for that drives the websockets
  # for the Badger API.
  # 
  # This operates like a cache and does not need to persist through restarts
  # so it is not mounted to a volume.
  badger_redis:
    image: redis:6.2.1
    container_name: badger_redis
    hostname: redis
    ports:
      - 6379:6379
    restart: unless-stopped
  # Run the Badge API running on Django. This will run the API
  # on port 8000 and will be accessible at http://localhost:8000
  #
  # This will also run the Django development server which will
  # automatically run all the migrations needed as well as 
  # reload when changes are made to the code.
  badger_server:
    container_name: badger_server
    build:
      dockerfile: Dockerfile.dev
      context: ./api
    volumes:
      - ./api:/code
    env_file:
      - ./.env
    ports:
      - '8000:8000'
    restart: unless-stopped
    depends_on:
      - badger_node
      - badger_db
      - badger_redis
    links:
      - badger_node
      - badger_db
      - badger_redis
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  # Run the React frontend
  badger_frontend:
    container_name: badger_frontend
    build:
      dockerfile: Dockerfile.dev
      context: ./frontend
      args:
        NPM_TOKEN: ${NPM_TOKEN}
    volumes:
      - ./frontend:/code
      - /code/node_modules
      - /code/public
    env_file:
      - ./.env
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true 
      - WDS_SOCKET_HOST=127.0.0.1
      - NODE_ENV=development
    ports:
      - '3000:3000'
    restart: unless-stopped
    depends_on:
      - badger_node
      - badger_db
      - badger_redis
      - badger_server
    links:
      - badger_node
      - badger_db
      - badger_redis
      - badger_server
    command: npm start --host 0.0.0.0 --disableHostCheck true