CONTRACT: 
    ☐ Full test suite
        Make sure to test the metadata shit!!
    ☐ Is there a reason to have the createBadge/updateBadge as separate functions?
        They do literally the same thing just with a revert if there's an existing badge on the createBadge()
    
ACTIVE:
    ☐ Contract tested and deployed on Polygon
    ☐ Management UI and functionality
        ☐ Create Collection
            ☐ Update request
            ☐ Post deployment request
            ☐ Status Message For Uploading
        ☐ Create Badges
            ☐ Front end dash
            ☐ Interaction UX
            ☐ Should be able to queue up a bunch of badges to send in one tx
            note: this is mainly copying the create collection functionally
        ☐ Send Badges
            ☐ Pull badges of org
            ☐ Show badges on front end
            ☐ create new fields to add addresses and a select option for badge Id
            ☐ Send tx, might need a warning for 50+
        ☐ Manage Badges
            ☐ Rename, new image for badges
            ☐ Revoke Badges
    ☐ Badge Preview
    ☐ Rate limit IPFS upload
    ☐ Mobile formatting of landing page and header
    
Contract Interaction:
    ☐ Have transaction errors
    ☐ Do a final update of ABIs
    ☐ Do test walk throughs and polish UX
    ☐ Set up host
    ☐ Implement new brand
    
V1.01:
    ☐ Signature to get into dashboard
    ☐ Add webm conversion for preview and IPFS upload
    ☐ Blocknative events for tx not done through our front end
    ☐ FAQ Page
    ☐ Add gnosis as a chain
    ☐ Description may have to be cleaned before IPFS interaction
        ☐ Convert line breaks to /n/n

            
ARCHIVED:
    ✔ Way to show transaction errors @done(22-07-11 21:20)
    ✔ Better explanation of the clone and initialize double transaction. @done(22-07-11 21:19)
    ✘ Is there any case where someone could rightfully need multiple copies of the same badge? @cancelled(22-07-11 20:28)
    ✔ Contract deployed on Mumbai for testing @done(22-07-11 20:25)
    ✔ Get basic landing page @done(22-07-11 20:25)
    ✔ Upload image and contract uri to IPFS @done(22-07-10 15:06)
    ✔ Make sure it is returning correctly in the js @done(22-07-10 15:06)
    ✔ Save obj in database @done(22-07-10 15:21)
    ✔ Clean up interaction ux @done(22-07-11 20:25)
    ✔ Deploy a contract via front end @done(22-07-10 21:33)
    ✘ Blocknative for events not done through our front end? @cancelled(22-07-10 15:06)
    ✔ File Uploading @done(22-07-10 14:58)
    ✔ IPFS upload @done(22-07-10 14:58)
    ✔ Set up hardhat for polygon and mumbai @done(22-07-09 22:23)
    ✔ Button to direct to admin @done(22-07-09 22:23)
    ✔ Some login and account UI @done(22-07-09 14:24)
    ✔ Collection Preview @done(22-07-10 00:33)
    ✔ API and database to store different roles and deeper info on an org than what is on chain @done(22-07-10 01:48)
    ✔ On chain metadata for tokens @done(22-07-08 02:38)
    ✔ MadHatterOrg deployed first, then MadHatter is deployed and points at that version @done(22-07-07 22:39)
        See: Test script
    ✔ Onchain metadata @done(22-07-07 13:36)
    ✔ Basic Contract @done(22-07-06 16:58)
    ✔ Minimal proxies @done(22-07-06 16:58)
    ✔ CRUD Roles @done(22-07-06 16:58)
    ✔ Permissions for certain @done(22-07-06 16:58)
    ✘ IF MAINNET: Airdrop Via EIP 2309 and a Merkle Root @cancelled(22-07-06 16:57)
    ✔ Initialize react project @done(22-07-06 10:54)
    ✔ Contract for Multi Level Membership Tokens @done(22-07-06 16:57)
    ✔ Utilize Minimal Proxies to allow for multiple contracts @done(22-07-06 14:02)
    ✔ Option For Soul Bound @done(22-07-06 16:57)
    ✔ Different Ranks/Roles @done(22-07-06 15:19)
        ✔ CRUD of roles in contract @done(22-07-06 15:19)
        ✔ Admin @done(22-07-06 15:19)
        ✔ Levels of Contributors @done(22-07-06 15:19)
        ✔ Participation Badges @done(22-07-06 15:19)
    ✔ Ability for Admins to revoke tokens @done(22-07-06 15:19)