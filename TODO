Drakes Wants:
    - General….. As a DAO operator I want to be able to track my community on chain So that I can use the variety of tools that can read that 
    - As a DAO operator I want to lock specific web pages / apps / etc for specific groups So that permissioned members can access functions/info Specific…. An a DAO operator I want to mint NFTs for my contributors So that I can use Guild to token gate discord channels / web pages 
    - Admin can: Launch new NFT collection at will Upload art for the NFT Add to collection at will (workaround is to overmint) Rescind NFTs (burn or transfer back to main) NFT Traits - Season - Name
    - Contributor Badges, Leader Badges, Governance Badges

CONTRACT: 
    ☐ Full test suite
        Make sure to test the metadata shit!!
    ☐ Is there any case where someone could rightfully need multiple copies of the same badge?
        If so, add a require statement to mint and remove the balanceOf in burn.
            Wtf did I mean by a require statement to mint
    ☐ Is there a reason to have the createBadge/updateBadge as separate functions?
        They do literally the same thing just with a revert if there's an existing badge on the createBadge()
    
ACTIVE:
    ☐ Contract tested and deployed on Polygon
    ☐ Get basic landing page
    ☐ Button to direct to admin
    ☐ Some login and account UI
    ☐ Moralis set up?
    ☐ Yes will need info on how many holders of tokens, possibly scrape the roles from this too if possible
    ☐ Management UI and functionality
    ☐ File Uploading
    ☐ Would be nice to upload to IPFS to not have any data storage
    ☐ Deploy a contract via front end
        To deploy the clone and get the clone contract within ethers:
        cloneTx = await proxy.connect(owner).deployOrg();
        cloneTx = await cloneTx.wait();        
        testOrgAddress = cloneTx.events[0].args[1]
        testOrg = await org.attach(testOrgAddress);
    ☐ API and database to store different roles and deeper info on an org than what is on chain? (POSSIBLE TO DO THIS WITHOUT AN API?)
    ☐ Set up host
        
BRANDING:
    ☐ Colors: 
    #36008D Purple
    #00C988 Green
    #FCD200 Yellow
    #FFB3C1 Pale Pink
    #FE5E54 Red
    #E2E0E5 Gray
            
ARCHIVED:
    ✔ On chain metadata for tokens @done(22-07-08 02:38)
    ✔ MadHatterOrg deployed first, then MadHatter is deployed and points at that version @done(22-07-07 22:39)
        See: Test script
    ✔ Onchain metadata @done(22-07-07 13:36)
    ✔ Basic Contract @done(22-07-06 16:58)
    ✔ Minimal proxies @done(22-07-06 16:58)
    ✔ CRUD Roles @done(22-07-06 16:58)
    ✔ Permissions for certain @done(22-07-06 16:58)
    ✘ IF MAINNET: Airdrop Via EIP 2309 and a Merkle Root @cancelled(22-07-06 16:57)
    ✔ Initialize react project @done(22-07-06 10:54)
    ✔ Contract for Multi Level Membership Tokens @done(22-07-06 16:57)
    ✔ Utilize Minimal Proxies to allow for multiple contracts @done(22-07-06 14:02)
    ✔ Option For Soul Bound @done(22-07-06 16:57)
    ✔ Different Ranks/Roles @done(22-07-06 15:19)
        ✔ CRUD of roles in contract @done(22-07-06 15:19)
        ✔ Admin @done(22-07-06 15:19)
        ✔ Levels of Contributors @done(22-07-06 15:19)
        ✔ Participation Badges @done(22-07-06 15:19)
    ✔ Ability for Admins to revoke tokens @done(22-07-06 15:19)